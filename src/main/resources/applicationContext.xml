<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 配置数据库连接信息 -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/jhl?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="root" />

		<!-- 配置连接池初始化连接数大小、最小连接数、最大连接数 -->
		<property name="initialSize" value="10"/>
		<property name="minIdle" value="10"/>
		<property name="maxActive" value="50"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="wall,stat" />
	</bean>

	<!--&lt;!&ndash; 5、mybatisplus的全局策略配置 &ndash;&gt;-->
	<!--<bean id="globalConfiguration" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">-->
		<!--&lt;!&ndash; 2.3版本后，驼峰命名默认值就是true，所以可不配置 &ndash;&gt;-->
		<!--&lt;!&ndash;<property name="dbColumnUnderline" value="true"/>&ndash;&gt;-->
		<!--&lt;!&ndash; 全局主键自增策略，0表示auto &ndash;&gt;-->
		<!--<property name="idType" value="0"/>-->
		<!--&lt;!&ndash; 全局表前缀配置 &ndash;&gt;-->
		<!--<property name="tablePrefix" value="tb_"/>-->
	<!--</bean>-->


	<!-- 2.配置MyBatis的会话工厂 -->
	<bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.fh.model"></property>

		<!-- 自动扫描MyBatis映射文件,省略掉SqlMapConfig.xml的mappers手工配置-->
		<property name="mapperLocations" value="classpath*:/mapper/*.xml"></property>
		<!-- 注入全局配置 -->
		<!--<property name="globalConfig" ref="globalConfiguration"/>-->
	</bean>

	<!-- 3.配置Mapper代理对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了-->
		<property name="basePackage" value="com.fh.mapper" />
		<!-- 注意事项：千万不要配置SqlSessionFactory，要配置sqlSessionFactoryBeanName -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!--配置事务管理器-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!--组件扫描器-->
	<context:component-scan base-package="com.fh" />
	

	
	<!-- 定义advice,配置传播特性、事务隔离级别、只读事务、回滚策略 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />

			<tx:method name="queryPayStatus" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="weChatPay" propagation="REQUIRED"
					   rollback-for="java.lang.Exception" />

			<tx:method name="query*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="select*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="batch*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>



	<!-- 配置 Spring 的声明式事务 -->
	<!-- 定义那些类使用事务 -->
	<!-- 切点 -->

	<!--(* com.fh.*.service.impl.*.*(..))   这里要改 -->
	<aop:config>
    <aop:advisor pointcut="execution(* com.fh.service.impl.*.*(..))"
        advice-ref="txAdvice" />
	</aop:config>


	
</beans> 
